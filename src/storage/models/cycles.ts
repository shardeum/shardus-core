import P2PApoptosis = require('../../p2p/Apoptosis')
import { SQLDataTypes } from '../utils/schemaDefintions'

// dont forget to add the certificate field as JSON
const cycles = [
  'cycles',
  {
    networkId: { type: SQLDataTypes.TEXT, allowNull: false },
    counter: {
      type: SQLDataTypes.BIGINT,
      unique: true,
      primaryKey: true,
      allowNull: false,
    },
    target: { type: SQLDataTypes.BIGINT, allowNull: true },
    mode: { type: SQLDataTypes.TEXT, allowNull: true },
    safetyMode: { type: SQLDataTypes.TEXT, allowNull: true },
    safetyNum: { type: SQLDataTypes.BIGINT, allowNull: true },
    networkStateHash: { type: SQLDataTypes.TEXT, allowNull: true },
    networkDataHash: { type: SQLDataTypes.JSON, allowNull: true },
    networkReceiptHash: { type: SQLDataTypes.JSON, allowNull: true },
    networkSummaryHash: { type: SQLDataTypes.JSON, allowNull: true },
    certificate: { type: SQLDataTypes.JSON, allowNull: false },
    previous: { type: SQLDataTypes.TEXT, allowNull: false },
    marker: { type: SQLDataTypes.TEXT, allowNull: false },
    start: { type: SQLDataTypes.BIGINT, allowNull: false },
    duration: { type: SQLDataTypes.BIGINT, allowNull: false },
    networkConfigHash: { type: SQLDataTypes.TEXT, allowNull: true },
    maxSyncTime: { type: SQLDataTypes.BIGINT, allowNull: true },
    active: { type: SQLDataTypes.BIGINT, allowNull: false },
    syncing: { type: SQLDataTypes.BIGINT, allowNull: false },
    standby: { type: SQLDataTypes.BIGINT, allowNull: false },
    desired: { type: SQLDataTypes.BIGINT, allowNull: false },
    expired: { type: SQLDataTypes.BIGINT, allowNull: false },
    joined: { type: SQLDataTypes.JSON, allowNull: false },
    joinedArchivers: { type: SQLDataTypes.JSON, allowNull: false },
    leavingArchivers: { type: SQLDataTypes.JSON, allowNull: false },
    joinedConsensors: { type: SQLDataTypes.JSON, allowNull: false },
    refreshedArchivers: { type: SQLDataTypes.JSON, allowNull: false },
    refreshedConsensors: { type: SQLDataTypes.JSON, allowNull: false },
    activated: { type: SQLDataTypes.JSON, allowNull: false },
    activatedPublicKeys: { type: SQLDataTypes.JSON, allowNull: false },
    removed: { type: SQLDataTypes.JSON, allowNull: false },
    appRemoved: { type: SQLDataTypes.JSON, allowNull: false },
    returned: { type: SQLDataTypes.JSON, allowNull: false },
    lost: { type: SQLDataTypes.JSON, allowNull: false },
    lostSyncing: { type: SQLDataTypes.JSON, allowNull: false },
    refuted: { type: SQLDataTypes.JSON, allowNull: false },
    nodeListHash: { type: SQLDataTypes.TEXT, allowNull: false },
    archiverListHash: { type: SQLDataTypes.TEXT, allowNull: false },
    standbyAdd: { type: SQLDataTypes.TEXT, allowNull: false },
    standbyNodeListHash: { type: SQLDataTypes.TEXT, allowNull: false },
    standbyRemove: { type: SQLDataTypes.TEXT, allowNull: false },
    lostArchivers: { type: SQLDataTypes.TEXT, allowNull: false },
    refutedArchivers: { type: SQLDataTypes.TEXT, allowNull: false },
    removedArchivers: { type: SQLDataTypes.TEXT, allowNull: false },
    startedSyncing: { type: SQLDataTypes.TEXT, allowNull: false },
    lostAfterSelection: { type: SQLDataTypes.TEXT, allowNull: false },
    finishedSyncing: { type: SQLDataTypes.TEXT, allowNull: false },
    standbyRefresh: { type: SQLDataTypes.TEXT, allowNull: false },
    ...P2PApoptosis.sequelizeCycleFieldModel,
    random: { type: SQLDataTypes.INTEGER, allowNull: false },
    txadd: { type: SQLDataTypes.JSON, allowNull: false },
    txremove: { type: SQLDataTypes.JSON, allowNull: false },
    txlisthash: { type: SQLDataTypes.TEXT, allowNull: false },
    archiversAtShutdown: { type: SQLDataTypes.JSON, allowNull: true },
  },
]

export default cycles
